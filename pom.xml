<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>demo2</artifactId>
  <version>1.0.0</version>
  <name>demo2</name>
  <packaging>jar</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!-- Use the same JavaFX LTS as your code -->
    <javafx.version>17.0.6</javafx.version>

    <!-- Will be set by profiles below: win / mac / mac-aarch64 / linux -->
    <javafx.platform>mac-aarch64</javafx.platform>

    <!-- Fully-qualified main class -->
    <main.class>org.example.scraper.ui.MultiWindowUI</main.class>
  </properties>

  <dependencies>
    <!-- Lombok (provided so it isn't packaged into runtime unnecessarily) -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.42</version>
      <scope>provided</scope>
    </dependency>

    <!-- JavaFX runtime modules; platform-specific classifier is critical on macOS -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
      <classifier>${javafx.platform}</classifier>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${javafx.version}</version>
      <classifier>${javafx.platform}</classifier>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-base</artifactId>
      <version>${javafx.version}</version>
      <classifier>${javafx.platform}</classifier>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-graphics</artifactId>
      <version>${javafx.version}</version>
      <classifier>${javafx.platform}</classifier>
    </dependency>

    <!-- Your other libs -->
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20250517</version>
    </dependency>
    <dependency>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <version>1.18.3</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>24.1.0</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.17.0</version>
    </dependency>

    <!-- JUnit -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.10.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.10.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Java compiler -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
        </configuration>
      </plugin>

      <!-- JavaFX Maven plugin: only run + jlink -->
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <configuration>
          <!-- Main class (FQN) -->
          <mainClass>org.example.scraper.ui.MultiWindowUI</mainClass>

          <!-- jlink options (valid for 0.0.8) -->
          <!-- Name of the runtime image directory under target/ -->
          <jlinkImageName>demo2-runtime</jlinkImageName>
          <!-- If set, a ZIP of the image will be created with this name -->
          <jlinkZipName>demo2-runtime</jlinkZipName>

          <!-- Optional jlink tunings -->
          <stripDebug>true</stripDebug>
          <noHeaderFiles>true</noHeaderFiles>
          <noManPages>true</noManPages>
          <compress>2</compress>

          <!-- Optional launcher script name inside the image -->
          <launcher>demo2</launcher>
        </configuration>
      </plugin>

      <!-- jpackage Maven plugin: builds .app / .dmg on macOS -->
      <plugin>
        <groupId>org.panteleyev</groupId>
        <artifactId>jpackage-maven-plugin</artifactId>
        <version>1.7.1</version>
        <executions>
          <execution>
            <goals>
              <goal>jpackage</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- App metadata -->
          <name>demo2</name>
          <appVersion>${project.version}</appVersion>
          <vendor>Org Example</vendor>

          <!-- Use the jlink image produced by javafx:jlink -->
          <runtimeImage>${project.build.directory}/demo2-runtime</runtimeImage>

          <!-- Where to place output -->
          <destination>${project.build.directory}/jpackage</destination>

          <!-- Choose installer image type on macOS: dmg or pkg -->
          <type>dmg</type>

          <!-- If your shaded JAR has Main-Class in MANIFEST, you can use main-jar -->
          <input>${project.build.directory}</input>
          <mainJar>${project.build.finalName}.jar</mainJar>

          <!-- Optional: app icon (put your .icns here) -->
          <icon>src/main/deploy/package/icon.icns</icon>

          <!-- Optional macOS bits -->
          <macPackageIdentifier>org.example.demo2</macPackageIdentifier>
        </configuration>
      </plugin>

      <!-- Shade plugin (optional): produce a normal fat JAR for dev use.
           Production launchers should use jlink/jpackage outputs instead. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.5.0</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals><goal>shade</goal></goals>
            <configuration>
              <createDependencyReducedPom>true</createDependencyReducedPom>
              <transformers>
                <!-- Put Main-Class into MANIFEST for 'java -jar' -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>${main.class}</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <!-- OS-specific profiles to set the correct JavaFX classifier -->
  <profiles>
    <profile>
      <id>mac-aarch64</id>
      <activation>
        <!-- Activated on Apple Silicon -->
        <os><family>mac</family></os>
        <property>
          <name>os.arch</name>
          <value>aarch64</value>
        </property>
      </activation>
    </profile>

    <profile>
      <id>mac</id>
      <activation>
        <!-- Activated on macOS Intel -->
        <os><family>mac</family></os>
        <property>
          <name>os.arch</name>
          <value>x86_64</value>
        </property>
      </activation>
      <properties>
        <javafx.platform>mac</javafx.platform>
      </properties>
    </profile>

    <profile>
      <id>win</id>
      <activation>
        <os><family>windows</family></os>
      </activation>
      <properties>
        <javafx.platform>win</javafx.platform>
      </properties>
    </profile>

    <profile>
      <id>linux</id>
      <activation>
        <os><family>unix</family></os>
      </activation>
      <properties>
        <javafx.platform>linux</javafx.platform>
      </properties>
    </profile>
  </profiles>
</project>
